---
apiVersion: v1
kind: Namespace
metadata:
  name: {{namespace}}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluent-bit
  namespace: {{namespace}}
  annotations:
    eks.amazonaws.com/role-arn: {{svc_acct_role}}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fluent-bit-read
rules:
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
  - apiGroups: [""]
    resources:
      - namespaces
      - pods
      - pods/logs
      - nodes
      - nodes/proxy
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fluent-bit-read
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: fluent-bit-read
subjects:
- kind: ServiceAccount
  name: fluent-bit
  namespace: {{namespace}}

{% for configmap in configmap_list %}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config-{{configmap.container_runtime}}
  namespace: logging
  labels:
    k8s-app: fluent-bit
data:
  # Configuration files: server, input, filters and output
  # ======================================================
  fluent-bit.conf: |
{% set flb_data_pipelines=configmap.flb_data_pipelines %}
{% include 'pipeline.conf' %}

    [FILTER]
        Name                kubernetes
        Match               log.*
        Kube_Tag_Prefix     log.var.log.containers.

        Kube_URL            https://kubernetes.default.svc:443
        Kube_CA_File        /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        Kube_Token_File     /var/run/secrets/kubernetes.io/serviceaccount/token

        Merge_Log           On
        Merge_Log_Trim      On
        Merge_Log_Key       log_processed

        K8S-Logging.Parser  On
        K8S-Logging.Exclude Off
        Buffer_Size         0
        Use_Kubelet         True
        Kubelet_Port        10250
        {% if not open_extra_metadata_flag %}
        Labels              Off
        Annotations         Off
        {% endif %}



    [FILTER]
        Name                modify
        Match               log.*
        Set                 cluster ${CLUSTER_NAME}

  parsers.conf: |
    [PARSER]
        Name   json
        Format json
        Time_Key time
        Time_Format %Y-%m-%dT%H:%M:%S.%LZ

    [PARSER]
        Name         docker
        Format       json
        Time_Key     container_log_time
        Time_Format  %Y-%m-%dT%H:%M:%S.%LZ
        Time_Keep    On

    [PARSER]
        Name        cri_regex
        Format      regex
        Regex       ^(?<container_log_time>[^ ]+) (?<stream>stdout|stderr) (?<logtag>[^ ]*) ?(?<log>.*)$

    {% include 'parser.conf' %}

{% endfor %}

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluent-bit
  namespace: {{namespace}}
  labels:
    app.kubernetes.io/name: fluent-bit-{{namespace}}
spec:
  selector:
    matchLabels:
      app: fluent-bit-{{namespace}}
  updateStrategy:
        type: RollingUpdate
  template:
    metadata:
      labels:
        app: fluent-bit-{{namespace}}
        version: v1
        kubernetes.io/cluster-service: "true"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "2022"
        prometheus.io/path: /api/v1/metrics/prometheus
    spec:
      initContainers:
      - name: amazonlinux2
        image: amazonlinux:latest
        args:
          - /bin/bash
          - -xec
          - |
            cd /tmp

            OS_ARCH=$(uname -m | grep 'aarch64' | wc -l)
            if [ $OS_ARCH -eq 1 ];then
              curl -LO $EKS_KUBECTL_DOWNLOAD_URL_ARM
            else
              curl -LO $EKS_KUBECTL_DOWNLOAD_URL_X86_64
            fi

            chmod 755 kubectl
            yum -y install jq
            echo $NODE_NAME > /tmp/node_name.txt
            CONTAINER_RUNTIME=$(./kubectl get node $NODE_NAME -o json | jq -r '.status.nodeInfo.containerRuntimeVersion')
            result=$(echo $CONTAINER_RUNTIME | grep 'docker' | wc -l)

            if [ $result -eq 1 ];then
              echo "we use docker runtime!" > /tmp/result.txt
              #./kubectl apply -f /tmp/fluent-bit-cofigmap-docker.yaml
              cp /fluent-bit-config-docker/* /configmap/
            fi

            if [ $result -eq 0 ];then
              echo "we use containerd runtime!" > /tmp/result.txt
              #./kubectl apply -f /tmp/fluent-bit-cofigmap-containerd.yaml
              cp /fluent-bit-config-containerd/* /configmap/
            fi

            #echo $CONTAINER_RUNTIME > /tmp/container_runtime.txt

        env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: EKS_KUBECTL_DOWNLOAD_URL_ARM
            value: "{{kubectl_download_url_arm}}"
          - name: EKS_KUBECTL_DOWNLOAD_URL_X86_64
            value: "{{kubectl_download_url_x86_64}}"
        volumeMounts:
          - name: fluent-bit-config-docker
            mountPath: /fluent-bit-config-docker
            readOnly: true
          - name: fluent-bit-config-containerd
            mountPath: /fluent-bit-config-containerd
            readOnly: true
          - name: configmap-dir
            mountPath: "/configmap"

      containers:
      - name: fluent-bit
        image: {{fluent_bit_image}}
        imagePullPolicy: Always
        env:
          - name: CLUSTER_NAME
            value: "{{eks_cluster_name}}"
        ports:
          - containerPort: 2022
        # command: ["/fluent-bit/bin/fluent-bit", "-c"]
        # args:
        # - /fluent-bit/etc/fluent-bit.conf
        resources:
          limits:
            memory: 500Mi
          requests:
            cpu: 200m
            memory: 100Mi
        securityContext:                 
          allowPrivilegeEscalation: false
          runAsNonRoot: false
        volumeMounts:
        #reference volume name
        - name: configmap-dir
          mountPath: /fluent-bit/etc
        - name: fluentbitstate
          mountPath: /var/fluent-bit/state
        - name: var-log
          mountPath: /var/log
        - name: var-lib-docker-containers
          mountPath: /var/lib/docker/containers
          readOnly: true
      terminationGracePeriodSeconds: 10
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: true
      volumes:
      #define volume name
      - name: configmap-dir
        emptyDir: {}
      - name: fluent-bit-config-docker
        configMap:
          name: fluent-bit-config-docker
      - name: fluent-bit-config-containerd
        configMap:
          name: fluent-bit-config-containerd
      - name: fluentbitstate
        hostPath:
          path: /var/fluent-bit/state
      - name: var-log
        hostPath:
          path: /var/log
      - name: var-lib-docker-containers
        hostPath:
          path: /var/lib/docker/containers
      serviceAccountName: fluent-bit
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      - operator: "Exists"
        effect: "NoExecute"
      - operator: "Exists"
        effect: "NoSchedule"