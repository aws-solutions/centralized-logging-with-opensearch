{
  "domain": {
    "domains": "Domains",
    "domainName": "Domain name",
    "version": "Version",
    "searchDocs": "Searchable documents",
    "freeSpace": "Free storage space",
    "health": "Cluster health",
    "remove": "Remove OpenSearch domain",
    "removeTips": "The following resources were created or updated by the solution during domain import. You can choose to either roll back or retain these changes. Removing the domain from the solution will not delete the OpenSearch domain from your AWS account.",
    "type": "Type",
    "resourceID": "Resource ID",
    "status": "Status",
    "retain": "Retain",
    "retainDesc": "The created and updated resources will be retained.",
    "rollback": "Roll back",
    "rollbackDesc": "The created resources will be deleted, and the updated resources will be rolled back.",
    "removeErrorMessage": "Remove domain failed due to: {{removeErrorMessage}}",
    "removeErrorIngestionExists": "Please make sure you delete all log ingestion pipelines that are ingesting logs into this domain before removing it.",
    "removeErrorSubstackUnderProcessing": "The domain is associated with a stack that is under processing. Please remove the associated stack first.",
    "standByTips": "The selected domain has enabled Multi-AZ with Standby deployment, at least two replicas are required."
  },
  "detail": {
    "config": "General configuration",
    "domain": "Domain",
    "searchDoc": "Searchable documents",
    "freeSpace": "Free storage space",
    "region": "Region",
    "version": "Version",
    "enable": "Enable",
    "cloudWatchAlarm": "CloudWatch alarms",
    "health": "Cluster health",
    "link": "Link",
    "tab": {
      "overview": "Overview",
      "proxy": "Access proxy",
      "alarms": "Alarms",
      "network": "Network",
      "tags": "Tags"
    },
    "overview": {
      "name": "Overview",
      "domainARN": "Domain ARN",
      "vpcEndpoint": "VPC endpoint",
      "kibana": "OpenSearch dashboards",
      "clickOpen": "Click to open link",
      "osDashboard": "OpenSearch dashboards",
      "az": "Availability Zones",
      "instanceType": "Instance type (data) ",
      "numberNodes": "Number of nodes (data)",
      "masterNode": "Number of dedicated master nodes",
      "masterInstanceType": "Instance type (dedicated master)",
      "warmNodes": "Number of warm nodes",
      "warmInstanceType": "Instance type (warm node)",
      "dataStoreType": "Data nodes storage type",
      "ebsVolumeType": "EBS volume type",
      "ebsVolumeSize": "EBS volume size"
    },
    "proxy": {
      "name": "Access proxy",
      "domain": "Domain",
      "publicSubnets": "Public subnets",
      "lbDomain": "Load Balancer domain",
      "ec2Key": "EC2 key name",
      "vpc": "VPC",
      "publicSecurity": "Public security group",
      "instanceType": "Instance type",
      "numberOfInstances": "Number of instances",
      "remove": "Delete access proxy",
      "removeTips": "Are you sure you want to delete the access proxy "
    },
    "alarms": {
      "list": {
        "clusterRed": "ClusterStatus.red maximum is >= 1 for 1 minute, 1 consecutive time",
        "clusterYellow": "ClusterStatus.yellow maximum is >= 1 for 1 minute, 1 consecutive time",
        "freeStorageSpace": "Minimum FreeStorageSpace (GiB)",
        "writeBlocked": "Index writes blocked error occurs for >= x times in 5 minutes, 1 consecutive time. Input `0` to disable this alarm.",
        "nodeUnreachable": "Nodes minimum is < x for 1 day, 1 consecutive time",
        "snapshotFailed": "AutomatedSnapshotFailure maximum is >= 1 for 1 minute, 1 consecutive time",
        "cpuUtilization": "CPUUtilization or WarmCPUUtilization maximum is >= 80% for 15 minutes, 3 consecutive times",
        "jvmMemory": "JVMMemoryPressure or WarmJVMMemoryPressure maximum is >= 80% for 5 minutes, 3 consecutive times",
        "masterCPU": "MasterCPUUtilization maximum is >= 50% for 15 minutes, 3 consecutive times",
        "masterJVM": "MasterJVMMemoryPressure maximum is >= 80% for 15 minutes, 1 consecutive time",
        "kmsKeyDisabled": "KMSKeyError is >= 1 for 1 minute, 1 consecutive time",
        "kmsKeyInAccess": "KMSKeyInaccessible is >= 1 for 1 minute, 1 consecutive time"
      },
      "name": "Alarms",
      "desc": "A list of recommended alarms by Amazon OpenSearch Service.",
      "alarm": "Alarm",
      "value": "Value",
      "remove": "Delete alarm",
      "removeTips": "Are you sure you want to delete the alarm "
    },
    "network": {
      "name": "OpenSearch domain network",
      "vpc": "VPC",
      "securityGroups": "Security groups",
      "iamRole": "IAM Role",
      "azSubnets": "AZs and subnets",
      "logProcessing": "Log processing network"
    }
  },
  "alarm": {
    "name": "Create alarms",
    "domainAlarmDesc": "By enabling CloudWatch alarms, you will receive notification of the status of the Amazon OpenSearch domain. The created alarms will be sent to the same SNS topic.",
    "email": "Email",
    "emailDesc": "Notification will be sent to this email. Please click the link in your email to validate the email address.",
    "emailError": "Please input alarm Email",
    "emailFormatError": "Email must be a validate format",
    "selectAlarmTips": "Please at least select one alarm option",
    "alarm": "Alarm",
    "value": "Value",
    "forbidNegative": " cannot be negative.",
    "notification": "Notification"
  },
  "proxy": {
    "name": "Create access proxy",
    "logProcessNetwork": "Log processing network",
    "clusterVPC": "VPC",
    "subnetGroup": "AZs and Subnet",
    "securityGroup": "Security group",
    "publicProxy": "Access proxy",
    "publicProxyDesc": "Public Access Proxy is a Forward proxy to access the OpenSearch Dashboards within the VPC. Enabling the proxy will create an ELB associated Nginx Auto Scaling group and route web traffics from Internet to the Amazon OpenSearch Dashboards.",
    "publicSubnets": "Public subnets",
    "publicSubnetsDesc": "Select the subnets of the log processing layer. The Subnet must be connected to the Cluster.",
    "chooseSubnet": "Choose two public subnets",
    "publicSG": "Public security group",
    "publicSGDesc": "Select a security group for the Application Load Balancer. This security group must have access to the log processing security group.",
    "chooseSG": "Choose a security group",
    "domainName": "Domain name",
    "domainNameDesc": "Input an domain name to associate with the access proxy. You will need to access the proxy via this domain.",
    "domainNameFormatError": "Domain Name required and must be a domain format.",
    "lbSSL": "Load Balancer SSL certificate",
    "lbSSLDesc": "Select the SSL certificate associated with the above domain name. You must create certificate in ACM.",
    "chooseSSL": "Choose an SSL certificate",
    "nginxKeyName": "Nginx instance key name",
    "nginxKeyNameDesc": "Specify the EC2 key name of the Nginx proxy.",
    "chooseKeyName": "Choose an EC2 key",
    "subnetError": "Please choose at least 2 public subnets.",
    "sgError": "Please choose public security group",
    "keyError": "Please choose an EC2 key",
    "secureConn": "Secured Connection",
    "secureConnDesc": "Connect the access proxy with HTTPS. You will need to have a Domain and SSL certificate.",
    "unsecureTips": "The access proxy created will be accessed using unsecured connection. You will need to delete and re-create the access proxy if you change your mind later.",
    "ackTips": "I acknowledge that I choose to use unsecured connection.",
    "ackError": "Please acknowledge all checkboxes before proceeding.",
    "sslError": "Please select a SSL certificate",
    "instanceType": "Instance type",
    "instanceTypeDesc": "Choose the instance type of the Nginx.",
    "instanceNumber": "Instance number",
    "instanceNumberDesc": "Choose the number of instances."
  },
  "import": {
    "name": "Import domain",
    "desc": "The solution is importing domain per your configuration",
    "step": {
      "selectDomain": "Select domain",
      "configNetwork": "Configure network",
      "createTags": "Create tags",
      "importDomain": "Import"
    },
    "selectDomain": {
      "osDomain": "OpenSearch domain",
      "domain": "Domain",
      "domainDesc": "Choose an OpenSearch domain to import into this solution. The domain must be in the same region as this solution.  Only domains with Active status is able to be imported.",
      "domainError": "Please select a domain",
      "selectDomain": "Select an OpenSearch domain",
      "checkDomain": "Validate",
      "checkDomainInProgressDesc": "Evaluate if the selected domain can be imported into this solution",
      "checkDomainPassDesc": "The selected domain meets the requirements to be imported into this solution.",
      "checkDomainErrorDesc": "The selected domain did not meet one or more requirements, please change the domain configuration or select a different domain.",
      "checkDomainWarningDesc": "There is a warning message in the selected domain configuration, please confirm before continuing.",
      "engineVersion": "Engine version: ",
      "engineType": "Engine type: ",
      "solutionPrivateSubnetWithNat": "NAT in solution private subnet: ",
      "networkType": "Network: ",
      "fgace": "Fine-grained access control enabled",
      "alertDomainVersion": "The version of the OpenSearch domain needs to be higher than v1.3.0.",
      "alertDomainEngineType": "Only OpenSearch engine type is currently supported.",
      "alertDomainInVpc": "Requires the domain deployed within a VPC.",
      "alertSolutionPrivateNAT": "The private subnet for the solution requires NAT.",
      "public": "Public access",
      "private": "VPC access"
    },
    "configNetwork": {
      "osNetwork": "Domain network",
      "clusterVPC": "VPC",
      "clusterSG": "Security groups",
      "clusterAZ": "AZs and subnets",
      "method": "Network creation options",
      "auto": "Automatic",
      "autoDesc": "Automatically create the VPC Peering Connection between the log processing layer and the OpenSearch VPC if needed.",
      "manual": "Manual",
      "manualDesc": "Manually specify the log processing layer and update route tables and security group.",
      "layerNetwork": "Log processing network",
      "layerNetworkDesc": "Solution requires one log processing subnet group. The log processing functions will reside in the log processing subnet and use the associated security group.",
      "configTip": "Configure network",
      "configTipDesc": "You have chosen a VPC other than the VPC of the selected Amazon OpenSearch domain. Please make sure the VPC can connect to the selected OpenSearch domain. ",
      "vpc": "VPC",
      "vpcDesc": "Select the Virtual Private Cloud (VPC) for the log processing layer. The chosen VPC should align with the VPC of the cluster, or it must be connected through VPC Peering Connection or Transit Gateway.",
      "chooseVPC": "Choose a VPC",
      "logProcessSubnetGroup": "Log processing subnet group",
      "logProcessSubnetGroupDesc": "Choose a minimum of two subnets for the log processing layer. These subnets must be configured as private, with routing set up to connect to a NAT gateway.",
      "chooseSubnet": "Choose two subnets",
      "logProcessSG": "Log processing security group",
      "logProcessSGDesc": "Choose a security group for the log processing layer. This security group must be configured to allow access to the OpenSearch cluster. If the connection is through a NAT gateway, port 443 needs to be open.",
      "chooseSG": "Choose a security group"
    }
  },
  "imported": {
    "setupVpcPeer": "Set up VPC Peering Connection: ",
    "updateRouteTable": "Update route table: ",
    "updateSG": "Update security group of the OpenSearch domain: ",
    "updateDomainNACL": "Update network ACL of the OpenSearch domain: ",
    "updateDomainRouteTable": "Update route tables of the OpenSearch domain: ",
    "updateSolutionRouteTable": "Update route tables of the solution vpc: ",
    "errorSetup": "Error in setting up ",
    "passedVpcPeer": "VPC Peering Connection passed: ",
    "checkRouteTable": "Checking route table: ",
    "checkSG": "Check security group of the OpenSearch domain: ",
    "checkError": "Error check: ",
    "domainRouteTableError": "Update domain route table failed",
    "solutionRouteTableError": "Update solution route table failed",
    "domainNACLError": "Update domain network ACL failed",
    "domainSGError": "Update domain security group failed",
    "vpcPeeringError": "Set VPC Peering Connection failed",
    "vpcPeering": "VPC Peering Connection",
    "openSearchSecurityGroup": "OpenSearch security group",
    "openSearchRouteTables": "OpenSearch route tables",
    "openSearchNetworkACL": "OpenSearch Network ACL",
    "SolutionRouteTables": "Solution route tables",
    "done": "Your domain has been imported successfully!"
  },
  "check": {
    "dueTo": "Fail to connect to selected OpenSearch domain due to: ",
    "chooseAnother": " Please update OpenSearch domain setting or select another domain.",
    "failed": {
      "DOMAIN_UNDER_PROCESSING": "Domain is under processing.",
      "UNSUPPORTED_DOMAIN_ENGINE": "Domain's engine is not supported.",
      "DOMAIN_NETWORK_TYPE_NOT_PRIVATE": "Domain's network type is not private.",
      "OLD_DOMAIN_VERSION": "Domain's version is not supported.",
      "SUBNET_WITHOUT_NAT": "Lack of NAT in domain's subnets.",
      "AOS_SECURITY_GROUP_CHECK_FAILED": "Domain's security group is blocking connectivity.",
      "NETWORK_ACL_CHECK_FAILED": "Domain's ACL is blocking connectivity.",
      "VPC_PEERING_CHECK_FAILED": "Lack of VPC Peering Connection between solution's VPC and domain's VPC.",
      "AOS_VPC_ROUTING_CHECK_FAILED": "Domain's VPC route table misses rule to route traffic to solution's VPC.",
      "SOLUTION_VPC_ROUTING_CHECK_FAILED": "Solution's VPC route table misses rule to route traffic to domain's VPC."
    }
  }
}
